import pygame
import random

# Initialize Pygame
pygame.init()

# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Set the screen dimensions
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Set the font style and size
FONT_STYLE = pygame.font.SysFont(None, 30)

# Set the block size and speed of the snake
BLOCK_SIZE = 20
SNAKE_SPEED = 10

# Create the screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Snake Game")

# Load the background image
background_image = pygame.image.load("pexels-mart-production-8458843.jpg").convert()

# Load the sound effects
eat_sound = pygame.mixer.Sound("DRMH9KW-toast-bite.mp3")
game_over_sound = pygame.mixer.Sound("Super Mario - Ending_ Nintendo Game Music.mp3")

# Define the Snake class
class Snake:
    def __init__(self):
        self.segments = [(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2)]
        self.direction = "right"
        self.color = GREEN

    def move(self):
        x, y = self.segments[0]
        if self.direction == "right":
            x += BLOCK_SIZE
        elif self.direction == "left":
            x -= BLOCK_SIZE
        elif self.direction == "up":
            y -= BLOCK_SIZE
        elif self.direction == "down":
            y += BLOCK_SIZE
        self.segments.insert(0, (x, y))
        self.segments.pop()

    def draw(self):
        for segment in self.segments:
            pygame.draw.rect(screen, self.color, (segment[0], segment[1], BLOCK_SIZE, BLOCK_SIZE))

    def eat(self, food):
        if self.segments[0] == food.position:
            self.segments.append(self.segments[-1])
            eat_sound.play()
            food.generate_position()

    def collide(self):
        if self.segments[0][0] < 0 or self.segments[0][0] >= SCREEN_WIDTH or self.segments[0][1] < 0 or self.segments[0][1] >= SCREEN_HEIGHT:
            return True
        for segment in self.segments[1:]:
            if self.segments[0] == segment:
                return True
        return False

# Define the Food class
class Food:
    def __init__(self):
        self.color = RED
        self.position = (0, 0)
        self.generate_position()

    def generate_position(self):
        x = random.randint(0, SCREEN_WIDTH // BLOCK_SIZE - 1) * BLOCK_SIZE
        y = random.randint(0, SCREEN_HEIGHT // BLOCK_SIZE - 1) * BLOCK_SIZE
        self.position = (x, y)

    def draw(self):
        pygame.draw.rect(screen, self.color, (self.position[0], self.position[1], BLOCK_SIZE, BLOCK_SIZE))

# Define the Score class
class Score:
    def __init__(self):
        self.value = 0

    def draw(self):
        score_text = FONT_STYLE.render("Score: " + str(self.value), True, WHITE)
        screen.blit(score_text, (10, 10))

# Create the Snake, Food, and Score objects
snake = Snake()
food = Food()
score = Score()

# Define the game loop
def game_loop():
    game_over = False

    # Start the game loop
    while not game_over:

        # Check for user input to move the snake
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RIGHT and snake.direction != "left":
                    snake.direction = "right"
                elif event.key == pygame.K_LEFT and snake.direction != "right":
                    snake.direction = "left"
                elif event.key == pygame.K_UP and snake.direction != "down":
                    snake.direction = "up"
                elif event.key == pygame.K_DOWN and snake.direction != "up":
                    snake.direction = "down"

        # Move the snake, check for collisions, and eat the food
        snake.move()
        if snake.collide():
            game_over_sound.play()
            game_over = True
        snake.eat(food)

        # Fill the screen with the background image
        screen.blit(background_image, (0, 0))

        # Draw the Snake, Food, and Score objects
        snake.draw()
        food.draw()
        score.draw()

        # Update the screen
        pygame.display.update()

        # Set the speed of the snake
        clock = pygame.time.Clock()
        clock.tick(SNAKE_SPEED)

    # Quit the game
    pygame.quit()
    quit()

# Start the game loop
game_loop()
